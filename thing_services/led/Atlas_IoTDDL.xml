<Atlas_IoTDDL>
	<Atlas_Thing>
		<Descriptive_Metadata>
			<Thing_ATID>MySmartThing01</Thing_ATID>
			<Thing_Name></Thing_Name>
			<Thing_Owner></Thing_Owner>
			<Thing_Vendor></Thing_Vendor>
			<Thing_Model></Thing_Model>
			<Thing_ReleaseDate>8/2020</Thing_ReleaseDate>
			<Thing_Type></Thing_Type>
			<Thing_OperatingSystem>Raspbian</Thing_OperatingSystem>
			<Thing_ShortDescription></Thing_ShortDescription>
			<LongDescription></LongDescription>
			<Thing_SSID>MySmartSpace</Thing_SSID>
			<Space_Coordinates></Space_Coordinates>
			<Space_Name></Space_Name>
			<Space_Description></Space_Description>
			<Space_Constraints>
				<Temperature>
					<Lower_Bound></Lower_Bound>
					<Upper_Bound></Upper_Bound>
				</Temperature>
				<Humidity>
					<Lower_Bound></Lower_Bound>
					<Upper_Bound></Upper_Bound>
				</Humidity>
				<Voltage>
					<Lower_Bound></Lower_Bound>
					<Upper_Bound></Upper_Bound>
				</Voltage>
				<Radio_Interference_Radius></Radio_Interference_Radius>
				<Safe_Temperature_Radius></Safe_Temperature_Radius>
			</Space_Constraints>
		</Descriptive_Metadata>
		<Administrative_Metadata>
			<Network_Manager>
				<Module></Module>
				<Type></Type>
				<Network_Name>Dd-149@Oxford_manor</Network_Name>
				<Network_Passcode>mtHfWdpRq</Network_Passcode>
				<MulticastGroup>
					<IP></IP>
					<Port></Port>
				</MulticastGroup>
				<Communication_Protocol>MQTT</Communication_Protocol>
				<InterOperableCommunication>
					<Broker>
						<Vendor>HiveMQ</Vendor>
						<Dashboard>http://www.mqtt-dashboard.com/</Dashboard>
						<IP>b3f9283150ee42c49e1ccb7688ba6c65.s1.eu.hivemq.cloud</IP>
						<Port>8883</Port>
					</Broker>
					<Topic>
						<Root>/Atlas</Root>
						<Network_MQTTClient>/Network/MQTT_Client</Network_MQTTClient>
						<Network_PrivateBroker>/Network/Private_Broker</Network_PrivateBroker>
						<Multicast_ThingIdentity>/Multicast/Tweet_ThingIdentity</Multicast_ThingIdentity>
						<Multicast_EntityIdentity>/Multicast/Tweet_EntityIdentity</Multicast_EntityIdentity>
						<Multicast_API>/Multicast/API</Multicast_API>
						<Unicast>/Unicast/Interaction</Unicast>
					</Topic>
				</InterOperableCommunication>
				<OMA_DM>
					<AccessName></AccessName>
					<IP></IP>
					<Port></Port>
				</OMA_DM>
			</Network_Manager>
			<Memory_Manager>
				<Store_Format></Store_Format>
				<MemoryUnit_Application></MemoryUnit_Application>
				<MemoryUnit_Knowledge></MemoryUnit_Knowledge>
			</Memory_Manager>
		</Administrative_Metadata>
		<Thing_Attachment>

		</Thing_Attachment>
		<Structural_Metadata>
			<Number_Hardware>0</Number_Hardware>
			<Number_Software>0</Number_Software>
			<Number_Hybrid>0</Number_Hybrid>
			<Number_Entities>1</Number_Entities>
		</Structural_Metadata>
	</Atlas_Thing>
	<Atlas_Entities>
		<Entity_1>
			<Descriptive_Metadata>
				<ID>Button1</ID>
				<Name>Button</Name>
				<Owner></Owner>
				<Vendor></Vendor>
				<Category></Category>
				<Type></Type>
				<Description></Description>
			</Descriptive_Metadata>
			<Services>
				<Service_1>
					<Name>ButtonLogger</Name>
					<AppCategory></AppCategory>
					<Type>Action</Type>
					<Keywords></Keywords>
					<Description></Description>
					<Contextual_Constraints>
						<Time_Window>1seconds</Time_Window>
						<Usage_Mode>Single</Usage_Mode>
						<Concurrent>No</Concurrent>
					</Contextual_Constraints>
					<Temporal_Constraints>
						<Working>
							<StartTime></StartTime>
							<EndTime></EndTime>
						</Working>
						<Callable>
							<StartTime></StartTime>
							<EndTime></EndTime>
						</Callable>
					</Temporal_Constraints>
					<OutputDescription></OutputDescription>
					<OutputType>void</OutputType>
					<Service_Formula><![CDATA[
// ~ Service body C/C++ code block ~
// You can use the inputs you defined above by name
// Any return values should match the specified output type

#include "wiringPi"
#include "dht.h"

using namespace std;

// Device 1: Button + LED
wiringPiSetup();
pinMode(17,OUTPUT);

for (int i =0;i<10;i++) {
    digitalWrite(17,HIGH);
    delay(500);
    digitalWrite(17,LOW):
}

// Device 2: DHT11 Temp/Humidity Sensor (From Kit)
// SETUP
#define dht_apin A0 //Analog Pin sensor is connected to
dht DHT;

Serial.begin(9600);
delay(1500); // Let system boot

// PROGRAM
DHT.read11(dht_apin);
Serial.print("temperature = ");
Serial.print(DHT.temperature);
delay(2000); // Wait before detecting

// Device 3: KY-012 Active Buzzer Module (From Kit)
// SETUP
int buzzerPin = 8;

pinMode(buzzerPin, OUTPUT);

// PROGRAM
digitalWrite(buzzerPin, HIGH);
delay(500);
digitalWrite(buzzerPin, LOW);
delay(500);

// Device 4: KY-038 Microphone Sound Sensor (From Kit)
// SETUP
int soundPin = 7;
int soundLEDPin = 13;
boolean soundDetected = 0;

pinMode(soundPin, INPUT);
pinMode(soundLEDPin, OUTPUT);
Serial.begin(9600);
delay(1500); // Let system boot

// PROGRAM
soundDetected = digitalRead(soundPin);
digitalWrite(soundLEDPin, soundDetected);


]]></Service_Formula>
					<Service_NumberInputs>1</Service_NumberInputs>
					<Service_InputTypes>int</Service_InputTypes>
					<Service_InputDescriptions>""</Service_InputDescriptions>
				</Service_1>
				<Number_Services>1</Number_Services>
			</Services>
			<UnboundedService>
				<Number_UnboundedServices>0</Number_UnboundedServices>
			</UnboundedService>
			<Relationships>
				<Number_Relationships>0</Number_Relationships>
			</Relationships>
		</Entity_1>
	</Atlas_Entities>
</Atlas_IoTDDL>